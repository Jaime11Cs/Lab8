LAB 8

COMANDOS GOOGLE CLOUD
1. vi server.js: Vi es un editor de texto en terminal, server. js es el nombre del archivo que deseo abrir
    var http = require('http'); #Carga el módulo HTTP nativo de Node.js, http es el objeto que permite trabajar con este módulo
    var handleRequest = function(request, response) { #Request contiene información sobre la solicitud que el cliente envió al servidor, response es el objeto que se usa para enviar una respuesta al cliente
      response.writeHead(200); #Establece el estado de la respuesta en 200
      response.end("Hello World!"); #Envía el cuerpo de la respuesta al cliente. En este caso el texto "Hello world"
    }
    var www = http.createServer(handleRequest); #Crea un servidor que utiliza la función handle request para manejar cada solicitud que recibe
    www.listen(8080); #Hace que el servidor escuche las solicitudes entrantes en el puerto 8080

2.node server.js #Ejecuta el archivo server.js con Node.js

3.vi Dockerfile #Edita un Dockerfile
   FROM node:6.9.2 #Especifica la imagen base para construir la imagen de Docker
   EXPOSE 8080 #Declara que el contenedor usará el puerto 8080 para aceptar conexiones
   COPY server.js . #Copia el arrchivo server.js desde el directorio local del host al directorio de trabajo del contenedor
   CMD node server.js #Define el comando predeterminado que se ejecutará cuando el contenedor inicie

4.docker build -t gcr.io/PROJECT_ID/hello-node:v1 . #Se utiliza para construir una imagen Docker y etiquetarla para que pueda ser alojada en Google Container registry (GCR)

5.docker run -d -p 8080:8080 gcr.io/PROJECT_ID/hello-node:v1 #Se utiliza para ejecutar un contenedor a partir de una imagen Docker que esta almacenada en Google Container Registry

6.curl http://localhost:8080 #Envia una solicitud HTTP al servidor que está ejecutándose en la máquina local, en el puerto 8080. Curl es una herramienta de línea de comandos para realizar solicitudes HTTP, y ootros protocolos de red

7.gcloud auth configure-docker # Se utiliza para autenticar Docker con Google Cloud Platform (GCP), permitiendo que Docker interáctue con los registros de contenedores de Google

8.docker push gcr.io/PROJECT_ID/hello-node:v1 #Se utiliza para subir una imagen Docker a Google Container Registry (GCR)

9.gcloud config set project PROJECT_ID #Se utiliza para establecer el proyecto activo en Google cloud. Permite que todos los comandos posteriores se apliquen a este proyecto específico

10.gcloud container clusters create hello-world \ #Crea un nuevo clúster de Kubernestes con el nombre Hello-world
                --num-nodes 2 \ #Especifica el número de nodos que el clúster tendrá inicialmente. En este caso 2 nodos
                --machine-type e2-medium \ #Define el tipo de máquina para los nodos del clúster
                --zone "europe-west1-c" #Especifica la zona donde se crea el clúster

#Comandos Kubernetes

11.kubectl create deployment hello-node \ #Se utiliza para crear un Deployment en un clúster Kubernetes. Este Deployment administra la ejecución de contenedores basados en la imágen Docker
    --image=gcr.io/PROJECT_ID/hello-node:v1 #Especifica la imagen Docker que se usará para los contenedores Deployment

12.kubectl get deployments #Se usa para listar todos los Deploymentes en el clúster Kubernetes en el que se está trabajando

13.kubectl get pods #Lista todos los Pods que está corriendo en el clúster de Kubernetes. Los Pods son las unidades básicas de ejecución en Kubernetes

14.kubectl cluster-info #Muestra información sobre el cluster Kubernetes al que se esta conectado

15.kubectl config view #Muestra la configuración actual del Kubernete

16.kubectl get events #Lista los eventos recientes en el clúster de Kubernetes. os eventos son mensajes generados por los diferentes componentes del clúster que describen lo que está sucediendo en el sistema

17.kubectl logs &lt;pod-name&gt; #Se utiliza pra ver los logs de un Pod específico en Kubernetes. Los logs muestran la salida generada por los contenedores en ejecución dentro del Pod.

18.kubectl expose deployment hello-node --type="LoadBalancer" --port=8080 #Se utiliza pra crear un Service en Kuberentes que expone un Deplyment al mundo exterior a través de un balanceador de carga

19.kubectl get services #Lista los servicios

20.kubectl scale deployment hello-node --replicas=4 #Se utiliza para escalar un Deployment en Kubernetes ajustando el número de réplicas (Pods) que debe tener

21.kubectl edit deployment hello-node # Edita directamente la configuración del Deploymente hello-node mediante el editor predeterminado
